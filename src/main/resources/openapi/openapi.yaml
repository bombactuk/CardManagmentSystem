openapi: 3.0.3
info:
  title: Bank Card Management API
  description: API для управления банковскими картами (аутентификация, регистрация, операции с картами)
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Локальный сервер

tags:
  - name: Authentication
    description: Аутентификация и регистрация
  - name: Admin Cards
    description: Управление картами (только для администраторов)
  - name: User Cards
    description: Операции пользователя с картами

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "Bob"
        password:
          type: string
          example: "2"

    RegistrationRequest:
      type: object
      required:
        - username
        - password
        - confirmPassword
        - email
      properties:
        username:
          type: string
          example: "Levshunov Ekaterina"
        password:
          type: string
          example: "5"
        confirmPassword:
          type: string
          example: "5"
        email:
          type: string
          format: email
          example: "pavel_dyrov13@gmail.com"

    CreateCardRequest:
      type: object
      required:
        - userId
        - cardNumber
        - expirationDate
        - balance
      properties:
        userId:
          type: integer
          example: 3
        cardNumber:
          type: string
          example: "3424567812344567"
        expirationDate:
          type: string
          format: date
          example: "2025-12-31"
        balance:
          type: number
          format: double
          example: 1000.00

    CardInfoRequest:
      type: object
      required:
        - cardNumber
      properties:
        cardNumber:
          type: string
          example: "3424567812342123"

    ChangeStatusRequest:
      type: object
      required:
        - cardId
        - userId
        - newStatus
      properties:
        cardId:
          type: integer
          example: 13
        userId:
          type: integer
          example: 3
        newStatus:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
          example: "BLOCKED"

    TransferRequest:
      type: object
      required:
        - fromCardNumber
        - toCardNumber
        - amount
      properties:
        fromCardNumber:
          type: string
          example: "3424567812341234"
        toCardNumber:
          type: string
          example: "3424567812345623"
        amount:
          type: number
          format: double
          example: 100.00

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Card not found"
        status:
          type: integer
          example: 404

paths:
  /auth:
    post:
      tags: [Authentication]
      summary: Аутентификация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Неверные учетные данные

  /registration:
    post:
      tags: [Authentication]
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        201:
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Ошибка валидации

  /admin/create/cards:
    post:
      tags: [Admin Cards]
      summary: Создать новую карту (только для администратора)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardRequest"
      responses:
        201:
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        403:
          description: Доступ запрещен

  /admin/card/info:
    post:
      tags: [Admin Cards]
      summary: Получить информацию о карте (только для администратора)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardInfoRequest"
      responses:
        200:
          description: Информация о карте
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardId:
                    type: integer
                  maskedCardNumber:
                    type: string
                  userFullName:
                    type: string
                  userEmail:
                    type: string
                  cardStatus:
                    type: string
                  balance:
                    type: number
        404:
          description: Карта не найдена

  /admin/change-status:
    post:
      tags: [Admin Cards]
      summary: Изменить статус карты (только для администратора)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeStatusRequest"
      responses:
        200:
          description: Статус изменен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Неверный запрос

  /admin/card/delete/{cardId}:
    delete:
      tags: [Admin Cards]
      summary: Удалить карту (только для администратора)
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Карта удалена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: Карта не найдена

  /user/cards/{cardNumber}/balance:
    get:
      tags: [User Cards]
      summary: Получить баланс карты
      security:
        - bearerAuth: []
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Баланс карты
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardNumber:
                    type: string
                  balance:
                    type: number
        403:
          description: Доступ запрещен

  /user/cards:
    get:
      tags: [User Cards]
      summary: Получить все карты пользователя
      security:
        - bearerAuth: []
      responses:
        200:
          description: Список карт
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    cardNumber:
                      type: string
                    expirationDate:
                      type: string
                    status:
                      type: string
                    balance:
                      type: number

  /user/card/block:
    post:
      tags: [User Cards]
      summary: Заблокировать карту
      security:
        - bearerAuth: []
      parameters:
        - name: cardNumber
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Карта заблокирована
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Ошибка блокировки

  /user/cards/transfer:
    post:
      tags: [User Cards]
      summary: Перевод между картами
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        200:
          description: Перевод выполнен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Ошибка перевода